"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var styledComponents=require("styled-components");const NeatTheme={color:null,columns:12,direction:"ltr",gutter:"20px",media:null},Neat=(t=NeatTheme)=>({color:t.color||NeatTheme.color,columns:t.columns||NeatTheme.columns,direction:"ltr"===t.direction||"rtl"===t.direction?t.direction:NeatTheme.direction,gutter:t.gutter||NeatTheme.gutter,media:t.media||NeatTheme.media}),parseUnit=t=>{let e=parseFloat(t);if(e){let r=t.split(e.toString(10));return r[r.length-1].trim()}return""},stripUnit=t=>{const e=parseFloat(t);return isNaN(e)?t:e},columnWidth=(t,e)=>{const{columns:r,gutter:i}=t;if(!r||void 0===i)return"0";let n=e/r,o=stripUnit(i),l=parseUnit(i);if(0===o)return`${100*n}%`;return`${100*n}% - ${`${o+o*n}${l}`}`},floatDirection=(t="ltr")=>"rtl"===t?"right":"left",floatOppositeDirection=(t="ltr")=>"ltr"===t?"right":"rtl"===t?"left":void 0,parseMedia=t=>"number"==typeof t?`only screen and (min-width: ${t}px)`:"string"==typeof t&&t,gridCollapse=t=>{const{direction:e,gutter:r}=t;if(!e||!r)return{};let i=parseUnit(r);if("%"===i)return{};let n=stripUnit(r);return{[`margin-${floatDirection(e)}`]:`-${r}`,[`margin-${floatOppositeDirection(e)}`]:`-${r}`,width:`calc(100% + ${2*n}${i})`}};let gridColumn=(t,e)=>{const{columns:r,direction:i,gutter:n}=t;return(e=Math.floor(e))>r&&(e=r),{width:`calc(${columnWidth(t,e)})`,float:`${floatDirection(i)}`,[`margin-${floatDirection(i)}`]:n}};const gridContainer=(t="&")=>{return{[`${t}::after`]:{clear:"both",content:'""',display:"block"}}};let gridMedia=(t,...e)=>{const{media:r}=t;return r?styledComponents.css`
    @media ${parseMedia(r)} {
      ${styledComponents.css(...e)}
    }
  `:[]},gridPush=(t,e=0)=>{const{direction:r,gutter:i}=t;if(e>0){let n=`${2*stripUnit(i)}${parseUnit(i)}`;return{[`margin-${floatDirection(r)}`]:`\n        calc(${columnWidth(t,e)} + ${n})\n      `}}return{[`margin-${floatDirection(r)}`]:i}};const gridShift=(t,e=0)=>{const{direction:r,gutter:i}=t;if(!r||void 0===i)return{};if(e>0){let n=columnWidth(t,e);return{[`${floatDirection(r)}`]:`\n        calc(${n} + ${i})\n      `,position:"relative"}}return{[`${floatDirection(r)}`]:i}};let gridVisual=t=>{let{color:e,gutter:r}=t;return r?{"background-image":`\n      repeating-linear-gradient(\n        to right, transparent, transparent,\n        ${e=e||""} ${r},\n        ${e} calc(${columnWidth(t,1)} + ${r})\n      )\n    `}:{}};exports.default=Neat,exports.gridCollapse=gridCollapse,exports.gridColumn=gridColumn,exports.gridContainer=gridContainer,exports.gridMedia=gridMedia,exports.gridPush=gridPush,exports.gridShift=gridShift,exports.gridVisual=gridVisual;
